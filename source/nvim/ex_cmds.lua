local luapathcfg = require('config')
package.path  = luapathcfg.path .. package.path
package.cpath = luapathcfg.cpath .. package.cpath

bit = require 'bit'

-- Description of the values below is contained in ex_cmds_defs.h file.
local RANGE      =    0x001
local BANG       =    0x002
local EXTRA      =    0x004
local XFILE      =    0x008
local NOSPC      =    0x010
local DFLALL     =    0x020
local WHOLEFOLD  =    0x040
local NEEDARG    =    0x080
local TRLBAR     =    0x100
local REGSTR     =    0x200
local COUNT      =    0x400
local NOTRLCOM   =    0x800
local ZEROR      =   0x1000
local USECTRLV   =   0x2000
local NOTADR     =   0x4000
local EDITCMD    =   0x8000
local BUFNAME    =  0x10000
local BUFUNL     =  0x20000
local ARGOPT     =  0x40000
local SBOXOK     =  0x80000
local CMDWIN     = 0x100000
local MODIFY     = 0x200000
local EXFLAGS    = 0x400000

local FILES      = bit.bor(XFILE, EXTRA)
local WORD1      = bit.bor(EXTRA, NOSPC)
local FILE1      = bit.bor(FILES, NOSPC)

local ADDR_LINES            =  0
local ADDR_WINDOWS          =  1
local ADDR_ARGUMENTS        =  2
local ADDR_LOADED_BUFFERS   =  3
local ADDR_BUFFERS          =  4
local ADDR_TABS             =  5
local ADDR_TABS_RELATIVE    =  6
local ADDR_QUICKFIX         =  7
local ADDR_OTHER            =  99

-- The following table is described in ex_cmds_defs.h file.
return 
{
    {
        cmdname='append',
        flags=bit.bor(BANG, RANGE, ZEROR, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_append',
    },
    {
        cmdname='abbreviate',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='abclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abclear',
    },
    {
        cmdname='aboveleft',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='all',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_all',
    },
    {
        cmdname='amenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='anoremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='args',
        flags=bit.bor(BANG, FILES, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_args',
    },
    {
        cmdname='argadd',
        flags=bit.bor(BANG, RANGE, NOTADR, ZEROR, FILES, TRLBAR),
        addr_type=ADDR_ARGUMENTS,
        func='ex_argadd',
    },
    {
        cmdname='argdelete',
        flags=bit.bor(BANG, RANGE, NOTADR, FILES, TRLBAR),
        addr_type=ADDR_ARGUMENTS,
        func='ex_argdelete',
    },
    {
        cmdname='argdo',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, NOTADR, DFLALL),
        addr_type=ADDR_ARGUMENTS,
        func='ex_listdo',
    },
    {
        cmdname='argedit',
        flags=bit.bor(BANG, NEEDARG, RANGE, NOTADR, ZEROR, FILE1, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_ARGUMENTS,
        func='ex_argedit',
    },
    {
        cmdname='argglobal',
        flags=bit.bor(BANG, FILES, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_args',
    },
    {
        cmdname='arglocal',
        flags=bit.bor(BANG, FILES, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_args',
    },
    {
        cmdname='argument',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, EXTRA, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_ARGUMENTS,
        func='ex_argument',
    },
    {
        cmdname='ascii',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='do_ascii',
    },
    {
        cmdname='autocmd',
        flags=bit.bor(BANG, EXTRA, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_autocmd',
    },
    {
        cmdname='augroup',
        flags=bit.bor(BANG, WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_autocmd',
    },
    {
        cmdname='aunmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='buffer',
        flags=bit.bor(BANG, RANGE, NOTADR, BUFNAME, BUFUNL, COUNT, EXTRA, EDITCMD, TRLBAR),
        addr_type=ADDR_BUFFERS,
        func='ex_buffer',
    },
    {
        cmdname='bNext',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_bprevious',
    },
    {
        cmdname='ball',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_buffer_all',
    },
    {
        cmdname='badd',
        flags=bit.bor(NEEDARG, FILE1, EDITCMD, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_edit',
    },
    {
        cmdname='bdelete',
        flags=bit.bor(BANG, RANGE, NOTADR, BUFNAME, COUNT, EXTRA, TRLBAR),
        addr_type=ADDR_BUFFERS,
        func='ex_bunload',
    },
    {
        cmdname='behave',
        flags=bit.bor(NEEDARG, WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_behave',
    },
    {
        cmdname='belowright',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='bfirst',
        flags=bit.bor(BANG, RANGE, NOTADR, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_brewind',
    },
    {
        cmdname='blast',
        flags=bit.bor(BANG, RANGE, NOTADR, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_blast',
    },
    {
        cmdname='bmodified',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_bmodified',
    },
    {
        cmdname='bnext',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_bnext',
    },
    {
        cmdname='botright',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='bprevious',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_bprevious',
    },
    {
        cmdname='brewind',
        flags=bit.bor(BANG, RANGE, NOTADR, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_brewind',
    },
    {
        cmdname='break',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_break',
    },
    {
        cmdname='breakadd',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_breakadd',
    },
    {
        cmdname='breakdel',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_breakdel',
    },
    {
        cmdname='breaklist',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_breaklist',
    },
    {
        cmdname='browse',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='buffers',
        flags=bit.bor(BANG, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='buflist_list',
    },
    {
        cmdname='bufdo',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, NOTADR, DFLALL),
        addr_type=ADDR_BUFFERS,
        func='ex_listdo',
    },
    {
        cmdname='bunload',
        flags=bit.bor(BANG, RANGE, NOTADR, BUFNAME, COUNT, EXTRA, TRLBAR),
        addr_type=ADDR_LOADED_BUFFERS,
        func='ex_bunload',
    },
    {
        cmdname='bwipeout',
        flags=bit.bor(BANG, RANGE, NOTADR, BUFNAME, BUFUNL, COUNT, EXTRA, TRLBAR),
        addr_type=ADDR_BUFFERS,
        func='ex_bunload',
    },
    {
        cmdname='change',
        flags=bit.bor(BANG, WHOLEFOLD, RANGE, COUNT, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_change',
    },
    {
        cmdname='cNext',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='cNfile',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='cabbrev',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='cabclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abclear',
    },
    {
        cmdname='caddbuffer',
        flags=bit.bor(RANGE, NOTADR, WORD1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cbuffer',
    },
    {
        cmdname='caddexpr',
        flags=bit.bor(NEEDARG, WORD1, NOTRLCOM, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cexpr',
    },
    {
        cmdname='caddfile',
        flags=bit.bor(TRLBAR, FILE1),
        addr_type=ADDR_LINES,
        func='ex_cfile',
    },
    {
        cmdname='call',
        flags=bit.bor(RANGE, NEEDARG, EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_call',
    },
    {
        cmdname='catch',
        flags=bit.bor(EXTRA, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_catch',
    },
    {
        cmdname='cbuffer',
        flags=bit.bor(BANG, RANGE, NOTADR, WORD1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cbuffer',
    },
    {
        cmdname='cbottom',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cbottom',
    },
    {
        cmdname='cc',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cc',
    },
    {
        cmdname='cclose',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cclose',
    },
    {
        cmdname='cd',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_cd',
    },
    {
        cmdname='cdo',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, NOTADR, DFLALL),
        addr_type=ADDR_QUICKFIX,
        func='ex_listdo',
    },
    {
        cmdname='center',
        flags=bit.bor(TRLBAR, RANGE, WHOLEFOLD, EXTRA, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_align',
    },
    {
        cmdname='cexpr',
        flags=bit.bor(NEEDARG, WORD1, NOTRLCOM, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cexpr',
    },
    {
        cmdname='cfile',
        flags=bit.bor(TRLBAR, FILE1, BANG),
        addr_type=ADDR_LINES,
        func='ex_cfile',
    },
    -- Even though 'cfdo' is alphabetically lower than 'cfile', it is after
    -- 'cfile' in this cmd list to support the existing ":cf" abbreviation.
    {
        cmdname='cfdo',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, NOTADR, DFLALL),
        addr_type=ADDR_QUICKFIX,
        func='ex_listdo',
    },
    {
        cmdname='cfirst',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cc',
    },
    {
        cmdname='cgetfile',
        flags=bit.bor(TRLBAR, FILE1),
        addr_type=ADDR_LINES,
        func='ex_cfile',
    },
    {
        cmdname='cgetbuffer',
        flags=bit.bor(RANGE, NOTADR, WORD1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cbuffer',
    },
    {
        cmdname='cgetexpr',
        flags=bit.bor(NEEDARG, WORD1, NOTRLCOM, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cexpr',
    },
    {
        cmdname='chdir',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_cd',
    },
    {
        cmdname='changes',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_changes',
    },
    {
        cmdname='checkpath',
        flags=bit.bor(TRLBAR, BANG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_checkpath',
    },
    {
        cmdname='checktime',
        flags=bit.bor(RANGE, NOTADR, BUFNAME, COUNT, EXTRA, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_checktime',
    },
    {
        cmdname='chistory',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='qf_history',
    },
    {
        cmdname='clist',
        flags=bit.bor(BANG, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='qf_list',
    },
    {
        cmdname='clast',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cc',
    },
    {
        cmdname='close',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, TRLBAR, CMDWIN),
        addr_type=ADDR_WINDOWS,
        func='ex_close',
    },
    {
        cmdname='clearjumps',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_clearjumps',
    },
    {
        cmdname='cmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='cmapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='cmenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='cnext',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='cnewer',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='qf_age',
    },
    {
        cmdname='cnfile',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='cnoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='cnoreabbrev',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='cnoremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='copy',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_copymove',
    },
    {
        cmdname='colder',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='qf_age',
    },
    {
        cmdname='colorscheme',
        flags=bit.bor(WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_colorscheme',
    },
    {
        cmdname='command',
        flags=bit.bor(EXTRA, BANG, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_command',
    },
    {
        cmdname='comclear',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_comclear',
    },
    {
        cmdname='compiler',
        flags=bit.bor(BANG, TRLBAR, WORD1, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_compiler',
    },
    {
        cmdname='continue',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_continue',
    },
    {
        cmdname='confirm',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='copen',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_copen',
    },
    {
        cmdname='cprevious',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='cpfile',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='cquit',
        flags=bit.bor(TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cquit',
    },
    {
        cmdname='crewind',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cc',
    },
    {
        cmdname='cscope',
        flags=bit.bor(EXTRA, NOTRLCOM, XFILE),
        addr_type=ADDR_LINES,
        func='do_cscope',
    },
    {
        cmdname='cstag',
        flags=bit.bor(BANG, TRLBAR, WORD1),
        addr_type=ADDR_LINES,
        func='do_cstag',
    },
    {
        cmdname='cunmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='cunabbrev',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='cunmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='cwindow',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cwindow',
    },
    {
        cmdname='delete',
        flags=bit.bor(RANGE, WHOLEFOLD, REGSTR, COUNT, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_operators',
    },
    {
        cmdname='delmarks',
        flags=bit.bor(BANG, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_delmarks',
    },
    {
        cmdname='debug',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_debug',
    },
    {
        cmdname='debuggreedy',
        flags=bit.bor(RANGE, NOTADR, ZEROR, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_debuggreedy',
    },
    {
        cmdname='delcommand',
        flags=bit.bor(NEEDARG, WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_delcommand',
    },
    {
        cmdname='delfunction',
        flags=bit.bor(NEEDARG, WORD1, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_delfunction',
    },
    {
        cmdname='display',
        flags=bit.bor(EXTRA, NOTRLCOM, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_display',
    },
    {
        cmdname='diffupdate',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_diffupdate',
    },
    {
        cmdname='diffget',
        flags=bit.bor(RANGE, EXTRA, TRLBAR, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_diffgetput',
    },
    {
        cmdname='diffoff',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_diffoff',
    },
    {
        cmdname='diffpatch',
        flags=bit.bor(EXTRA, FILE1, TRLBAR, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_diffpatch',
    },
    {
        cmdname='diffput',
        flags=bit.bor(RANGE, EXTRA, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_diffgetput',
    },
    {
        cmdname='diffsplit',
        flags=bit.bor(EXTRA, FILE1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_diffsplit',
    },
    {
        cmdname='diffthis',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_diffthis',
    },
    {
        cmdname='digraphs',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_digraphs',
    },
    {
        cmdname='djump',
        flags=bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA),
        addr_type=ADDR_LINES,
        func='ex_findpat',
    },
    {
        cmdname='dlist',
        flags=bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_findpat',
    },
    {
        cmdname='doautocmd',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_doautocmd',
    },
    {
        cmdname='doautoall',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_doautoall',
    },
    {
        cmdname='drop',
        flags=bit.bor(FILES, EDITCMD, NEEDARG, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_drop',
    },
    {
        cmdname='dsearch',
        flags=bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_findpat',
    },
    {
        cmdname='dsplit',
        flags=bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA),
        addr_type=ADDR_LINES,
        func='ex_findpat',
    },
    {
        cmdname='edit',
        flags=bit.bor(BANG, FILE1, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_edit',
    },
    {
        cmdname='earlier',
        flags=bit.bor(TRLBAR, EXTRA, NOSPC, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_later',
    },
    {
        cmdname='echo',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_echo',
    },
    {
        cmdname='echoerr',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_execute',
    },
    {
        cmdname='echohl',
        flags=bit.bor(EXTRA, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_echohl',
    },
    {
        cmdname='echomsg',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_execute',
    },
    {
        cmdname='echon',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_echo',
    },
    {
        cmdname='else',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_else',
    },
    {
        cmdname='elseif',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_else',
    },
    {
        cmdname='emenu',
        flags=bit.bor(NEEDARG, EXTRA, TRLBAR, NOTRLCOM, RANGE, NOTADR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_emenu',
    },
    {
        cmdname='endif',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_endif',
    },
    {
        cmdname='endfunction',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_endfunction',
    },
    {
        cmdname='endfor',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_endwhile',
    },
    {
        cmdname='endtry',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_endtry',
    },
    {
        cmdname='endwhile',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_endwhile',
    },
    {
        cmdname='enew',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_edit',
    },
    {
        cmdname='ex',
        flags=bit.bor(BANG, FILE1, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_edit',
    },
    {
        cmdname='execute',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_execute',
    },
    {
        cmdname='exit',
        flags=bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_exit',
    },
    {
        cmdname='exusage',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_exusage',
    },
    {
        cmdname='file',
        flags=bit.bor(RANGE, NOTADR, ZEROR, BANG, FILE1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_file',
    },
    {
        cmdname='files',
        flags=bit.bor(BANG, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='buflist_list',
    },
    {
        cmdname='filetype',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_filetype',
    },
    {
        cmdname='filter',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='find',
        flags=bit.bor(RANGE, NOTADR, BANG, FILE1, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_find',
    },
    {
        cmdname='finally',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_finally',
    },
    {
        cmdname='finish',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_finish',
    },
    {
        cmdname='first',
        flags=bit.bor(EXTRA, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_rewind',
    },
    {
        cmdname='fold',
        flags=bit.bor(RANGE, WHOLEFOLD, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_fold',
    },
    {
        cmdname='foldclose',
        flags=bit.bor(RANGE, BANG, WHOLEFOLD, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_foldopen',
    },
    {
        cmdname='folddoopen',
        flags=bit.bor(RANGE, DFLALL, NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_folddo',
    },
    {
        cmdname='folddoclosed',
        flags=bit.bor(RANGE, DFLALL, NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_folddo',
    },
    {
        cmdname='foldopen',
        flags=bit.bor(RANGE, BANG, WHOLEFOLD, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_foldopen',
    },
    {
        cmdname='for',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_while',
    },
    {
        cmdname='function',
        flags=bit.bor(EXTRA, BANG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_function',
    },
    {
        cmdname='global',
        flags=bit.bor(RANGE, WHOLEFOLD, BANG, EXTRA, DFLALL, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_global',
    },
    {
        cmdname='goto',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_goto',
    },
    {
        cmdname='grep',
        flags=bit.bor(RANGE, NOTADR, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_make',
    },
    {
        cmdname='grepadd',
        flags=bit.bor(RANGE, NOTADR, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_make',
    },
    {
        cmdname='help',
        flags=bit.bor(BANG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_help',
    },
    {
        cmdname='helpclose',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_helpclose',
    },
    {
        cmdname='helpgrep',
        flags=bit.bor(EXTRA, NOTRLCOM, NEEDARG),
        addr_type=ADDR_LINES,
        func='ex_helpgrep',
    },
    {
        cmdname='helptags',
        flags=bit.bor(NEEDARG, FILES, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_helptags',
    },
    {
        cmdname='hardcopy',
        flags=bit.bor(RANGE, COUNT, EXTRA, TRLBAR, DFLALL, BANG),
        addr_type=ADDR_LINES,
        func='ex_hardcopy',
    },
    {
        cmdname='highlight',
        flags=bit.bor(BANG, EXTRA, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_highlight',
    },
    {
        cmdname='hide',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, EXTRA, NOTRLCOM),
        addr_type=ADDR_WINDOWS,
        func='ex_hide',
    },
    {
        cmdname='history',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_history',
    },
    {
        cmdname='insert',
        flags=bit.bor(BANG, RANGE, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_append',
    },
    {
        cmdname='iabbrev',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='iabclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abclear',
    },
    {
        cmdname='if',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_if',
    },
    {
        cmdname='ijump',
        flags=bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA),
        addr_type=ADDR_LINES,
        func='ex_findpat',
    },
    {
        cmdname='ilist',
        flags=bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_findpat',
    },
    {
        cmdname='imap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='imapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='imenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='inoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='inoreabbrev',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='inoremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='intro',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_intro',
    },
    {
        cmdname='isearch',
        flags=bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_findpat',
    },
    {
        cmdname='isplit',
        flags=bit.bor(BANG, RANGE, DFLALL, WHOLEFOLD, EXTRA),
        addr_type=ADDR_LINES,
        func='ex_findpat',
    },
    {
        cmdname='iunmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='iunabbrev',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='iunmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='join',
        flags=bit.bor(BANG, RANGE, WHOLEFOLD, COUNT, EXFLAGS, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_join',
    },
    {
        cmdname='jumps',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_jumps',
    },
    {
        cmdname='k',
        flags=bit.bor(RANGE, WORD1, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mark',
    },
    {
        cmdname='keepmarks',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='keepjumps',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='keeppatterns',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='keepalt',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='list',
        flags=bit.bor(RANGE, WHOLEFOLD, COUNT, EXFLAGS, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_print',
    },
    {
        cmdname='lNext',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='lNfile',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='last',
        flags=bit.bor(EXTRA, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_last',
    },
    {
        cmdname='language',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_language',
    },
    {
        cmdname='laddexpr',
        flags=bit.bor(NEEDARG, WORD1, NOTRLCOM, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cexpr',
    },
    {
        cmdname='laddbuffer',
        flags=bit.bor(RANGE, NOTADR, WORD1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cbuffer',
    },
    {
        cmdname='laddfile',
        flags=bit.bor(TRLBAR, FILE1),
        addr_type=ADDR_LINES,
        func='ex_cfile',
    },
    {
        cmdname='later',
        flags=bit.bor(TRLBAR, EXTRA, NOSPC, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_later',
    },
    {
        cmdname='lbuffer',
        flags=bit.bor(BANG, RANGE, NOTADR, WORD1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cbuffer',
    },
    {
        cmdname='lbottom',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cbottom',
    },
    {
        cmdname='lcd',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_cd',
    },
    {
        cmdname='lchdir',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_cd',
    },
    {
        cmdname='lclose',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cclose',
    },
    {
        cmdname='lcscope',
        flags=bit.bor(EXTRA, NOTRLCOM, XFILE),
        addr_type=ADDR_LINES,
        func='do_cscope',
    },
    {
        cmdname='ldo',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, NOTADR, DFLALL),
        addr_type=ADDR_QUICKFIX,
        func='ex_listdo',
    },
    {
        cmdname='left',
        flags=bit.bor(TRLBAR, RANGE, WHOLEFOLD, EXTRA, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_align',
    },
    {
        cmdname='leftabove',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='let',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_let',
    },
    {
        cmdname='lexpr',
        flags=bit.bor(NEEDARG, WORD1, NOTRLCOM, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cexpr',
    },
    {
        cmdname='lfile',
        flags=bit.bor(TRLBAR, FILE1, BANG),
        addr_type=ADDR_LINES,
        func='ex_cfile',
    },
    -- Even though 'lfdo' is alphabetically lower than 'lfile', it is after
    -- 'lfile' in this cmd list to support the existing ":lf" abbreviation.
    {
        cmdname='lfdo',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, NOTADR, DFLALL),
        addr_type=ADDR_QUICKFIX,
        func='ex_listdo',
    },
    {
        cmdname='lfirst',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cc',
    },
    {
        cmdname='lgetfile',
        flags=bit.bor(TRLBAR, FILE1),
        addr_type=ADDR_LINES,
        func='ex_cfile',
    },
    {
        cmdname='lgetbuffer',
        flags=bit.bor(RANGE, NOTADR, WORD1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cbuffer',
    },
    {
        cmdname='lgetexpr',
        flags=bit.bor(NEEDARG, WORD1, NOTRLCOM, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cexpr',
    },
    {
        cmdname='lgrep',
        flags=bit.bor(RANGE, NOTADR, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_make',
    },
    {
        cmdname='lgrepadd',
        flags=bit.bor(RANGE, NOTADR, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_make',
    },
    {
        cmdname='lhelpgrep',
        flags=bit.bor(EXTRA, NOTRLCOM, NEEDARG),
        addr_type=ADDR_LINES,
        func='ex_helpgrep',
    },
    {
        cmdname='lhistory',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='qf_history',
    },
    {
        cmdname='ll',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cc',
    },
    {
        cmdname='llast',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cc',
    },
    {
        cmdname='llist',
        flags=bit.bor(BANG, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='qf_list',
    },
    {
        cmdname='lmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='lmapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='lmake',
        flags=bit.bor(BANG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_make',
    },
    {
        cmdname='lnoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='lnext',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='lnewer',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='qf_age',
    },
    {
        cmdname='lnfile',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='loadview',
        flags=bit.bor(FILE1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_loadview',
    },
    {
        cmdname='loadkeymap',
        flags=bit.bor(CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_loadkeymap',
    },
    {
        cmdname='lockmarks',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='lockvar',
        flags=bit.bor(BANG, EXTRA, NEEDARG, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_lockvar',
    },
    {
        cmdname='lolder',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='qf_age',
    },
    {
        cmdname='lopen',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_copen',
    },
    {
        cmdname='lprevious',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='lpfile',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cnext',
    },
    {
        cmdname='lrewind',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR, BANG),
        addr_type=ADDR_LINES,
        func='ex_cc',
    },
    {
        cmdname='ltag',
        flags=bit.bor(NOTADR, TRLBAR, BANG, WORD1),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='lunmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='lua',
        flags=bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_lua',
    },
    {
        cmdname='luado',
        flags=bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_luado',
    },
    {
        cmdname='luafile',
        flags=bit.bor(RANGE, FILE1, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_luafile',
    },
    {
        cmdname='lvimgrep',
        flags=bit.bor(RANGE, NOTADR, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_vimgrep',
    },
    {
        cmdname='lvimgrepadd',
        flags=bit.bor(RANGE, NOTADR, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_vimgrep',
    },
    {
        cmdname='lwindow',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_cwindow',
    },
    {
        cmdname='ls',
        flags=bit.bor(BANG, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='buflist_list',
    },
    {
        cmdname='move',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_copymove',
    },
    {
        cmdname='mark',
        flags=bit.bor(RANGE, WORD1, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mark',
    },
    {
        cmdname='make',
        flags=bit.bor(BANG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_make',
    },
    {
        cmdname='map',
        flags=bit.bor(BANG, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='mapclear',
        flags=bit.bor(EXTRA, BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='marks',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='do_marks',
    },
    {
        cmdname='match',
        flags=bit.bor(RANGE, NOTADR, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_match',
    },
    {
        cmdname='menu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, BANG, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='menutranslate',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menutranslate',
    },
    {
        cmdname='messages',
        flags=bit.bor(EXTRA, TRLBAR, RANGE, CMDWIN),
        addr_type=ADDR_OTHER,
        func='ex_messages',
    },
    {
        cmdname='mkexrc',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mkrc',
    },
    {
        cmdname='mksession',
        flags=bit.bor(BANG, FILE1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_mkrc',
    },
    {
        cmdname='mkspell',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_mkspell',
    },
    {
        cmdname='mkvimrc',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mkrc',
    },
    {
        cmdname='mkview',
        flags=bit.bor(BANG, FILE1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_mkrc',
    },
    {
        cmdname='mode',
        flags=bit.bor(WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mode',
    },
    {
        cmdname='mzscheme',
        flags=bit.bor(RANGE, EXTRA, DFLALL, NEEDARG, CMDWIN, SBOXOK),
        addr_type=ADDR_LINES,
        func='ex_script_ni',
    },
    {
        cmdname='mzfile',
        flags=bit.bor(RANGE, FILE1, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='next',
        flags=bit.bor(RANGE, NOTADR, BANG, FILES, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_next',
    },
    {
        cmdname='nbkey',
        flags=bit.bor(EXTRA, NOTADR, NEEDARG),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='nbclose',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='nbstart',
        flags=bit.bor(WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='new',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_splitview',
    },
    {
        cmdname='nmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='nmapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='nmenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='nnoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='nnoremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='noremap',
        flags=bit.bor(BANG, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='noautocmd',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='nohlsearch',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_nohlsearch',
    },
    {
        cmdname='noreabbrev',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='noremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, BANG, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='noswapfile',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='normal',
        flags=bit.bor(RANGE, BANG, EXTRA, NEEDARG, NOTRLCOM, USECTRLV, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_normal',
    },
    {
        cmdname='number',
        flags=bit.bor(RANGE, WHOLEFOLD, COUNT, EXFLAGS, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_print',
    },
    {
        cmdname='nunmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='nunmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='oldfiles',
        flags=bit.bor(BANG, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_oldfiles',
    },
    {
        cmdname='omap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='omapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='omenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='only',
        flags=bit.bor(BANG, NOTADR, RANGE, COUNT, TRLBAR),
        addr_type=ADDR_WINDOWS,
        func='ex_only',
    },
    {
        cmdname='onoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='onoremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='options',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_options',
    },
    {
        cmdname='ounmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='ounmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='ownsyntax',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ownsyntax',
    },
    {
        cmdname='print',
        flags=bit.bor(RANGE, WHOLEFOLD, COUNT, EXFLAGS, TRLBAR, CMDWIN, SBOXOK),
        addr_type=ADDR_LINES,
        func='ex_print',
    },
    {
        cmdname='packadd',
        flags=bit.bor(BANG, FILE1, NEEDARG, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_packadd',
    },
    {
        cmdname='packloadall',
        flags=bit.bor(BANG, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_packloadall',
    },
    {
        cmdname='pclose',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_pclose',
    },
    {
        cmdname='perl',
        flags=bit.bor(RANGE, EXTRA, DFLALL, NEEDARG, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_script_ni',
    },
    {
        cmdname='perldo',
        flags=bit.bor(RANGE, EXTRA, DFLALL, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='pedit',
        flags=bit.bor(BANG, FILE1, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_pedit',
    },
    {
        cmdname='pop',
        flags=bit.bor(RANGE, NOTADR, BANG, COUNT, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='popup',
        flags=bit.bor(NEEDARG, EXTRA, BANG, TRLBAR, NOTRLCOM, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='ppop',
        flags=bit.bor(RANGE, NOTADR, BANG, COUNT, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='preserve',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_preserve',
    },
    {
        cmdname='previous',
        flags=bit.bor(EXTRA, RANGE, NOTADR, COUNT, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_previous',
    },
    {
        cmdname='promptfind',
        flags=bit.bor(EXTRA, NOTRLCOM, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='promptrepl',
        flags=bit.bor(EXTRA, NOTRLCOM, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='profile',
        flags=bit.bor(BANG, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_profile',
    },
    {
        cmdname='profdel',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_breakdel',
    },
    {
        cmdname='psearch',
        flags=bit.bor(BANG, RANGE, WHOLEFOLD, DFLALL, EXTRA),
        addr_type=ADDR_LINES,
        func='ex_psearch',
    },
    {
        cmdname='ptag',
        flags=bit.bor(RANGE, NOTADR, BANG, WORD1, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='ptNext',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='ptfirst',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='ptjump',
        flags=bit.bor(BANG, TRLBAR, WORD1),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='ptlast',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='ptnext',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='ptprevious',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='ptrewind',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='ptselect',
        flags=bit.bor(BANG, TRLBAR, WORD1),
        addr_type=ADDR_LINES,
        func='ex_ptag',
    },
    {
        cmdname='put',
        flags=bit.bor(RANGE, WHOLEFOLD, BANG, REGSTR, TRLBAR, ZEROR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_put',
    },
    {
        cmdname='pwd',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_pwd',
    },
    {
        cmdname='python',
        flags=bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_python',
    },
    {
        cmdname='pydo',
        flags=bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_pydo',
    },
    {
        cmdname='pyfile',
        flags=bit.bor(RANGE, FILE1, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_pyfile',
    },
    {
        cmdname='py3',
        flags=bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_python3',
    },
    {
        cmdname='py3do',
        flags=bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_pydo3',
    },
    {
        cmdname='python3',
        flags=bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_python3',
    },
    {
        cmdname='py3file',
        flags=bit.bor(RANGE, FILE1, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_py3file',
    },
    {
        cmdname='quit',
        flags=bit.bor(BANG, RANGE, COUNT, NOTADR, TRLBAR, CMDWIN),
        addr_type=ADDR_WINDOWS,
        func='ex_quit',
    },
    {
        cmdname='quitall',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_quit_all',
    },
    {
        cmdname='qall',
        flags=bit.bor(BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_quit_all',
    },
    {
        cmdname='read',
        flags=bit.bor(BANG, RANGE, WHOLEFOLD, FILE1, ARGOPT, TRLBAR, ZEROR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_read',
    },
    {
        cmdname='recover',
        flags=bit.bor(BANG, FILE1, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_recover',
    },
    {
        cmdname='redo',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_redo',
    },
    {
        cmdname='redir',
        flags=bit.bor(BANG, FILES, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_redir',
    },
    {
        cmdname='redraw',
        flags=bit.bor(BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_redraw',
    },
    {
        cmdname='redrawstatus',
        flags=bit.bor(BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_redrawstatus',
    },
    {
        cmdname='registers',
        flags=bit.bor(EXTRA, NOTRLCOM, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_display',
    },
    {
        cmdname='resize',
        flags=bit.bor(RANGE, NOTADR, TRLBAR, WORD1),
        addr_type=ADDR_LINES,
        func='ex_resize',
    },
    {
        cmdname='retab',
        flags=bit.bor(TRLBAR, RANGE, WHOLEFOLD, DFLALL, BANG, WORD1, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_retab',
    },
    {
        cmdname='return',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_return',
    },
    {
        cmdname='rewind',
        flags=bit.bor(EXTRA, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_rewind',
    },
    {
        cmdname='right',
        flags=bit.bor(TRLBAR, RANGE, WHOLEFOLD, EXTRA, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_align',
    },
    {
        cmdname='rightbelow',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='rshada',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_shada',
    },
    {
        cmdname='runtime',
        flags=bit.bor(BANG, NEEDARG, FILES, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_runtime',
    },
    {
        cmdname='rundo',
        flags=bit.bor(NEEDARG, FILE1),
        addr_type=ADDR_LINES,
        func='ex_rundo',
    },
    {
        cmdname='ruby',
        flags=bit.bor(RANGE, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ruby',
    },
    {
        cmdname='rubydo',
        flags=bit.bor(RANGE, DFLALL, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_rubydo',
    },
    {
        cmdname='rubyfile',
        flags=bit.bor(RANGE, FILE1, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_rubyfile',
    },
    {
        cmdname='rviminfo',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_shada',
    },
    {
        cmdname='substitute',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_substitute',
    },
    {
        cmdname='sNext',
        flags=bit.bor(EXTRA, RANGE, NOTADR, COUNT, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_previous',
    },
    {
        cmdname='sargument',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, EXTRA, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_ARGUMENTS,
        func='ex_argument',
    },
    {
        cmdname='sall',
        flags=bit.bor(BANG, RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_all',
    },
    {
        cmdname='sandbox',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='saveas',
        flags=bit.bor(BANG, DFLALL, FILE1, ARGOPT, CMDWIN, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_write',
    },
    {
        cmdname='sbuffer',
        flags=bit.bor(BANG, RANGE, NOTADR, BUFNAME, BUFUNL, COUNT, EXTRA, EDITCMD, TRLBAR),
        addr_type=ADDR_BUFFERS,
        func='ex_buffer',
    },
    {
        cmdname='sbNext',
        flags=bit.bor(RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_bprevious',
    },
    {
        cmdname='sball',
        flags=bit.bor(RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_buffer_all',
    },
    {
        cmdname='sbfirst',
        flags=bit.bor(EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_brewind',
    },
    {
        cmdname='sblast',
        flags=bit.bor(EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_blast',
    },
    {
        cmdname='sbmodified',
        flags=bit.bor(RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_bmodified',
    },
    {
        cmdname='sbnext',
        flags=bit.bor(RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_bnext',
    },
    {
        cmdname='sbprevious',
        flags=bit.bor(RANGE, NOTADR, COUNT, EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_bprevious',
    },
    {
        cmdname='sbrewind',
        flags=bit.bor(EDITCMD, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_brewind',
    },
    {
        cmdname='scriptnames',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_scriptnames',
    },
    {
        cmdname='scriptencoding',
        flags=bit.bor(WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_scriptencoding',
    },
    {
        cmdname='scscope',
        flags=bit.bor(EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='do_scscope',
    },
    {
        cmdname='set',
        flags=bit.bor(TRLBAR, EXTRA, CMDWIN, SBOXOK),
        addr_type=ADDR_LINES,
        func='ex_set',
    },
    {
        cmdname='setfiletype',
        flags=bit.bor(TRLBAR, EXTRA, NEEDARG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_setfiletype',
    },
    {
        cmdname='setglobal',
        flags=bit.bor(TRLBAR, EXTRA, CMDWIN, SBOXOK),
        addr_type=ADDR_LINES,
        func='ex_set',
    },
    {
        cmdname='setlocal',
        flags=bit.bor(TRLBAR, EXTRA, CMDWIN, SBOXOK),
        addr_type=ADDR_LINES,
        func='ex_set',
    },
    {
        cmdname='sfind',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_splitview',
    },
    {
        cmdname='sfirst',
        flags=bit.bor(EXTRA, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_rewind',
    },
    {
        cmdname='simalt',
        flags=bit.bor(NEEDARG, WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='sign',
        flags=bit.bor(NEEDARG, RANGE, NOTADR, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_sign',
    },
    {
        cmdname='silent',
        flags=bit.bor(NEEDARG, EXTRA, BANG, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='sleep',
        flags=bit.bor(RANGE, NOTADR, COUNT, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_sleep',
    },
    {
        cmdname='slast',
        flags=bit.bor(EXTRA, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_last',
    },
    {
        cmdname='smagic',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_submagic',
    },
    {
        cmdname='smap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='smapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='smenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='snext',
        flags=bit.bor(RANGE, NOTADR, BANG, FILES, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_next',
    },
    {
        cmdname='snomagic',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_submagic',
    },
    {
        cmdname='snoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='snoremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='source',
        flags=bit.bor(BANG, FILE1, TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_source',
    },
    {
        cmdname='sort',
        flags=bit.bor(RANGE, DFLALL, WHOLEFOLD, BANG, EXTRA, NOTRLCOM, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_sort',
    },
    {
        cmdname='split',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_splitview',
    },
    {
        cmdname='spellgood',
        flags=bit.bor(BANG, RANGE, NOTADR, NEEDARG, EXTRA, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_spell',
    },
    {
        cmdname='spelldump',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_spelldump',
    },
    {
        cmdname='spellinfo',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_spellinfo',
    },
    {
        cmdname='spellrepall',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_spellrepall',
    },
    {
        cmdname='spellundo',
        flags=bit.bor(BANG, RANGE, NOTADR, NEEDARG, EXTRA, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_spell',
    },
    {
        cmdname='spellwrong',
        flags=bit.bor(BANG, RANGE, NOTADR, NEEDARG, EXTRA, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_spell',
    },
    {
        cmdname='sprevious',
        flags=bit.bor(EXTRA, RANGE, NOTADR, COUNT, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_previous',
    },
    {
        cmdname='srewind',
        flags=bit.bor(EXTRA, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_rewind',
    },
    {
        cmdname='stop',
        flags=bit.bor(TRLBAR, BANG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_stop',
    },
    {
        cmdname='stag',
        flags=bit.bor(RANGE, NOTADR, BANG, WORD1, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_stag',
    },
    {
        cmdname='startinsert',
        flags=bit.bor(BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_startinsert',
    },
    {
        cmdname='startgreplace',
        flags=bit.bor(BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_startinsert',
    },
    {
        cmdname='startreplace',
        flags=bit.bor(BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_startinsert',
    },
    {
        cmdname='stopinsert',
        flags=bit.bor(BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_stopinsert',
    },
    {
        cmdname='stjump',
        flags=bit.bor(BANG, TRLBAR, WORD1),
        addr_type=ADDR_LINES,
        func='ex_stag',
    },
    {
        cmdname='stselect',
        flags=bit.bor(BANG, TRLBAR, WORD1),
        addr_type=ADDR_LINES,
        func='ex_stag',
    },
    {
        cmdname='sunhide',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_buffer_all',
    },
    {
        cmdname='sunmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='sunmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='suspend',
        flags=bit.bor(TRLBAR, BANG, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_stop',
    },
    {
        cmdname='sview',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_splitview',
    },
    {
        cmdname='swapname',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_swapname',
    },
    {
        cmdname='syntax',
        flags=bit.bor(EXTRA, NOTRLCOM, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_syntax',
    },
    {
        cmdname='syntime',
        flags=bit.bor(NEEDARG, WORD1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_syntime',
    },
    {
        cmdname='syncbind',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_syncbind',
    },
    {
        cmdname='t',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_copymove',
    },
    {
        cmdname='tcd',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_cd',
    },
    {
        cmdname='tchdir',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_cd',
    },
    {
        cmdname='tNext',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='tag',
        flags=bit.bor(RANGE, NOTADR, BANG, WORD1, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='tags',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='do_tags',
    },
    {
        cmdname='tab',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_TABS,
        func='ex_wrongmodifier',
    },
    {
        cmdname='tabclose',
        flags=bit.bor(BANG, RANGE, NOTADR, ZEROR, EXTRA, NOSPC, TRLBAR, CMDWIN),
        addr_type=ADDR_TABS,
        func='ex_tabclose',
    },
    {
        cmdname='tabdo',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM, RANGE, NOTADR, DFLALL),
        addr_type=ADDR_TABS,
        func='ex_listdo',
    },
    {
        cmdname='tabedit',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, ZEROR, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_TABS,
        func='ex_splitview',
    },
    {
        cmdname='tabfind',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, ZEROR, EDITCMD, ARGOPT, NEEDARG, TRLBAR),
        addr_type=ADDR_TABS,
        func='ex_splitview',
    },
    {
        cmdname='tabfirst',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_TABS,
        func='ex_tabnext',
    },
    {
        cmdname='tabmove',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, NOSPC, TRLBAR),
        addr_type=ADDR_TABS,
        func='ex_tabmove',
    },
    {
        cmdname='tablast',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_TABS,
        func='ex_tabnext',
    },
    {
        cmdname='tabnext',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, NOSPC, TRLBAR),
        addr_type=ADDR_TABS,
        func='ex_tabnext',
    },
    {
        cmdname='tabnew',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, ZEROR, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_TABS,
        func='ex_splitview',
    },
    {
        cmdname='tabonly',
        flags=bit.bor(BANG, RANGE, NOTADR, ZEROR, EXTRA, NOSPC, TRLBAR, CMDWIN),
        addr_type=ADDR_TABS,
        func='ex_tabonly',
    },
    {
        cmdname='tabprevious',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, NOSPC, TRLBAR),
        addr_type=ADDR_TABS_RELATIVE,
        func='ex_tabnext',
    },
    {
        cmdname='tabNext',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, NOSPC, TRLBAR),
        addr_type=ADDR_TABS_RELATIVE,
        func='ex_tabnext',
    },
    {
        cmdname='tabrewind',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_TABS,
        func='ex_tabnext',
    },
    {
        cmdname='tabs',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_TABS,
        func='ex_tabs',
    },
    {
        cmdname='tcl',
        flags=bit.bor(RANGE,EXTRA,NEEDARG,CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_script_ni',
    },
    {
        cmdname='tcldo',
        flags=bit.bor(RANGE,DFLALL,EXTRA,NEEDARG,CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='tclfile',
        flags=bit.bor(RANGE,FILE1,NEEDARG,CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='terminal',
        flags=bit.bor(BANG, FILES, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_terminal',
    },
    {
        cmdname='tfirst',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='throw',
        flags=bit.bor(EXTRA, NEEDARG, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_throw',
    },
    {
        cmdname='tjump',
        flags=bit.bor(BANG, TRLBAR, WORD1),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='tlast',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='tmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='tmapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },    
    {
        cmdname='tmenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='tnext',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='tnoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='topleft',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='tprevious',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='trewind',
        flags=bit.bor(RANGE, NOTADR, BANG, TRLBAR, ZEROR),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='try',
        flags=bit.bor(TRLBAR, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_try',
    },
    {
        cmdname='tselect',
        flags=bit.bor(BANG, TRLBAR, WORD1),
        addr_type=ADDR_LINES,
        func='ex_tag',
    },
    {
        cmdname='tunmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='tunmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='undo',
        flags=bit.bor(RANGE, NOTADR, COUNT, ZEROR, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_undo',
    },
    {
        cmdname='undojoin',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_undojoin',
    },
    {
        cmdname='undolist',
        flags=bit.bor(TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_undolist',
    },
    {
        cmdname='unabbreviate',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_abbreviate',
    },
    {
        cmdname='unhide',
        flags=bit.bor(RANGE, NOTADR, COUNT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_buffer_all',
    },
    {
        cmdname='unlet',
        flags=bit.bor(BANG, EXTRA, NEEDARG, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unlet',
    },
    {
        cmdname='unlockvar',
        flags=bit.bor(BANG, EXTRA, NEEDARG, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_lockvar',
    },
    {
        cmdname='unmap',
        flags=bit.bor(BANG, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='unmenu',
        flags=bit.bor(BANG, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='unsilent',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='update',
        flags=bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_update',
    },
    {
        cmdname='vglobal',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, DFLALL, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_global',
    },
    {
        cmdname='version',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_version',
    },
    {
        cmdname='verbose',
        flags=bit.bor(NEEDARG, RANGE, NOTADR, EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='vertical',
        flags=bit.bor(NEEDARG, EXTRA, NOTRLCOM),
        addr_type=ADDR_LINES,
        func='ex_wrongmodifier',
    },
    {
        cmdname='visual',
        flags=bit.bor(BANG, FILE1, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_edit',
    },
    {
        cmdname='view',
        flags=bit.bor(BANG, FILE1, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_edit',
    },
    {
        cmdname='vimgrep',
        flags=bit.bor(RANGE, NOTADR, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_vimgrep',
    },
    {
        cmdname='vimgrepadd',
        flags=bit.bor(RANGE, NOTADR, BANG, NEEDARG, EXTRA, NOTRLCOM, TRLBAR, XFILE),
        addr_type=ADDR_LINES,
        func='ex_vimgrep',
    },
    {
        cmdname='viusage',
        flags=bit.bor(TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_viusage',
    },
    {
        cmdname='vmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='vmapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='vmenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='vnoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='vnew',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_splitview',
    },
    {
        cmdname='vnoremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='vsplit',
        flags=bit.bor(BANG, FILE1, RANGE, NOTADR, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_splitview',
    },
    {
        cmdname='vunmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='vunmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='write',
        flags=bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_write',
    },
    {
        cmdname='wNext',
        flags=bit.bor(RANGE, WHOLEFOLD, NOTADR, BANG, FILE1, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_wnext',
    },
    {
        cmdname='wall',
        flags=bit.bor(BANG, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='do_wqall',
    },
    {
        cmdname='while',
        flags=bit.bor(EXTRA, NOTRLCOM, SBOXOK, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_while',
    },
    {
        cmdname='winsize',
        flags=bit.bor(EXTRA, NEEDARG, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_winsize',
    },
    {
        cmdname='wincmd',
        flags=bit.bor(NEEDARG, WORD1, RANGE, NOTADR),
        addr_type=ADDR_WINDOWS,
        func='ex_wincmd',
    },
    {
        cmdname='windo',
        flags=bit.bor(BANG, NEEDARG, EXTRA, NOTRLCOM, RANGE, NOTADR, DFLALL),
        addr_type=ADDR_WINDOWS,
        func='ex_listdo',
    },
    {
        cmdname='winpos',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='wnext',
        flags=bit.bor(RANGE, NOTADR, BANG, FILE1, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_wnext',
    },
    {
        cmdname='wprevious',
        flags=bit.bor(RANGE, NOTADR, BANG, FILE1, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_wnext',
    },
    {
        cmdname='wq',
        flags=bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_exit',
    },
    {
        cmdname='wqall',
        flags=bit.bor(BANG, FILE1, ARGOPT, DFLALL, TRLBAR),
        addr_type=ADDR_LINES,
        func='do_wqall',
    },
    {
        cmdname='wsverb',
        flags=bit.bor(EXTRA, NOTADR, NEEDARG),
        addr_type=ADDR_LINES,
        func='ex_ni',
    },
    {
        cmdname='wshada',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_shada',
    },
    {
        cmdname='wundo',
        flags=bit.bor(BANG, NEEDARG, FILE1),
        addr_type=ADDR_LINES,
        func='ex_wundo',
    },
    {
        cmdname='wviminfo',
        flags=bit.bor(BANG, FILE1, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_shada',
    },
    {
        cmdname='xit',
        flags=bit.bor(RANGE, WHOLEFOLD, BANG, FILE1, ARGOPT, DFLALL, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_exit',
    },
    {
        cmdname='xall',
        flags=bit.bor(BANG, TRLBAR),
        addr_type=ADDR_LINES,
        func='do_wqall',
    },
    {
        cmdname='xmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='xmapclear',
        flags=bit.bor(EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_mapclear',
    },
    {
        cmdname='xmenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='xnoremap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_map',
    },
    {
        cmdname='xnoremenu',
        flags=bit.bor(RANGE, NOTADR, ZEROR, EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='xunmap',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_unmap',
    },
    {
        cmdname='xunmenu',
        flags=bit.bor(EXTRA, TRLBAR, NOTRLCOM, USECTRLV, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_menu',
    },
    {
        cmdname='yank',
        flags=bit.bor(RANGE, WHOLEFOLD, REGSTR, COUNT, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_operators',
    },
    {
        cmdname='z',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, EXFLAGS, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_z',
    },
    {
        cmdname='!',
        idxname='CMD_bang',
        flags=bit.bor(RANGE, WHOLEFOLD, BANG, FILES, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_bang',
    },
    {
        cmdname='#',
        idxname='CMD_pound',
        flags=bit.bor(RANGE, WHOLEFOLD, COUNT, EXFLAGS, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_print',
    },
    {
        cmdname='&',
        idxname='CMD_and',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_substitute',
    },
    {
        cmdname='<',
        idxname='CMD_lshift',
        flags=bit.bor(RANGE, WHOLEFOLD, COUNT, EXFLAGS, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_operators',
    },
    {
        cmdname='=',
        idxname='CMD_equal',
        flags=bit.bor(RANGE, TRLBAR, DFLALL, EXFLAGS, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_equal',
    },
    {
        cmdname='>',
        idxname='CMD_rshift',
        flags=bit.bor(RANGE, WHOLEFOLD, COUNT, EXFLAGS, TRLBAR, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_operators',
    },
    {
        cmdname='@',
        idxname='CMD_at',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, TRLBAR, CMDWIN),
        addr_type=ADDR_LINES,
        func='ex_at',
    },
    {
        cmdname='Next',
        flags=bit.bor(EXTRA, RANGE, NOTADR, COUNT, BANG, EDITCMD, ARGOPT, TRLBAR),
        addr_type=ADDR_LINES,
        func='ex_previous',
    },
    {
        cmdname='~',
        idxname='CMD_tilde',
        flags=bit.bor(RANGE, WHOLEFOLD, EXTRA, CMDWIN, MODIFY),
        addr_type=ADDR_LINES,
        func='ex_substitute',
    },
}
