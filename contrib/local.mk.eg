# Individual entries must be uncommented to take effect.

# You should set the Qt5 install perfix by uncomment the following line.
# This is the location directory which contains: bin/, lib/, include/, share/, etc.
#
# my Qt5 install perfix(for linux dynamic)   is: /opt/Qt5.5.1/5.5/gcc_64
# my Qt5 install perfix(for windows dynamic) is: D:/App/Msys2/mingw64
# my Qt5 install perfix(for windows dynamic) is: D:/App/Msys2/mingw32
#
# QT5_SHARED_LIB_PREFIX := /opt/Qt5.5.1/5.5/gcc_64
# QT5_SHARED_LIB_PREFIX := D:/App/Msys2/mingw64
#
# my Qt5 install perfix(for linux static)    is: /opt/Qt/qt-static/5.8.0
# my Qt5 install perfix(for windows static)  is: D:/App/Msys2/mingw64/qt5-static
# my Qt5 install perfix(for windows static)  is: D:/App/Msys2/mingw32/qt5-static
#
# QT5_STATIC_LIB_PREFIX := /opt/Qt/qt-static/5.8.0
# QT5_STATIC_LIB_PREFIX := D:/App/Msys2/mingw64/qt5-static

# By default, the architecture will automatically detect if not cross compiling
# If do cross compiling, select one explicitly by uncomment the following entries.
# 'TARGET_ARCH_32' and 'TARGET_ARCH_64' are mutually exclusive, please just select one!
#
# Uncomment the following for 32-bit target build
# TARGET_ARCH_32 := ON
#
# Uncomment the following for 64-bit target build
# TARGET_ARCH_64 := ON

# By default, enable testing for nvim & snail, but you can make your choice if you want.
#
# Uncomment the following to disable all testing
# TESTING_ENABLE := OFF
#
# Uncomment the following to enable testing for nvim only
# TESTING_ENABLE := nvim
#
# Uncomment the following to enable testing for snail only
# TESTING_ENABLE := snail

# By default, the installation prefix is: ${PROJECT_BINARY_DIR}/gkide
#
# GKIDE_CMAKE_EXTRA_FLAGS += -DCMAKE_INSTALL_PREFIX=Other_Install_Full_Path

# Valid package release type (the trail of the full version) for all build:
#
# dev     : in development
# alpha   : internal testing
# beta    : public testing
# rc      : release candidate
# release : release version
# stable  : stable version
#
# dev -> alpha -> beta -> rc -> release -> stable
#
# GKIDE_CMAKE_EXTRA_FLAGS += -DPACKAGE_RELEASE_TYPE=release

# Sets the build type: defaults to 'Release'. Valid values:
#
# - Dev:            => Enable all optimizations, -Og if available, -O2 and -g if not
#                   => Enable TRACE logging
#                   => Enable assertion
#
# - Debug:          => Disable optimizations (-O0)
#                   => Enable DEBUG logging
#                   => Enable assertion
#
# - Release:        => Same as RelWithDebInfo
#                   => Enable ALERT logging
#                   => Enable assertion
#
# - MinSizeRel:     => Enables all -O2 optimization that do not typically increase code size,
#                      and performs further optimizations designed to reduce code size (-Os).
#                   => Disable logging
#                   => Disable assertion
#
# Set the build type to 'Debug'
# GKIDE_CMAKE_BUILD_TYPE := Debug

# Valid values for logging level is:
# TRACE(0), DEBUG(1), STATE(2), ALERT(3), ERROR(4), FATAL(5), LOGOFF(6)
# By default, enable for Dev/Debug/Release and other type build, disable for MinSizeRel.
#
# Uncomment the following to set log level: STATE(2)
# GKIDE_CMAKE_EXTRA_FLAGS += -DNVIM_LOG_LEVEL_MIN=2
# GKIDE_CMAKE_EXTRA_FLAGS += -DSNAIL_LOG_LEVEL_MIN=2
#
# Uncomment the following to disable logging: LOGOFF(6)
# GKIDE_CMAKE_EXTRA_FLAGS += -DNVIM_LOG_LEVEL_MIN=6
# GKIDE_CMAKE_EXTRA_FLAGS += -DSNAIL_LOG_LEVEL_MIN=6
#
# Uncomment the following to disable the assertion
# GKIDE_CMAKE_EXTRA_FLAGS += -DASSERTION_ENABLE=OFF
#
# Uncomment the following to enable Travis CI
# GKIDE_CMAKE_EXTRA_FLAGS += -DTRAVIS_CI_ENABLE=ON
#
# Uncomment the following to enable gcov support
# GKIDE_CMAKE_EXTRA_FLAGS += -DGCOV_ENABLE=ON

# By default, the required dependencies will auto download, extract, build and install. The bundled
# libraries are statically linked to nvim. If you download the correctly required dependencies source
# tarball by hand, and put the tarball to the proper place with proper name, then just use them and
# skip download. You can find the details information will auto download, just stop it and do it by
# hand if you want.
#
# By default, the jemalloc family of memory allocation functions are used for linux like system.
#
# Uncomment the following to use libc memory allocation functions instead.
# GKIDE_CMAKE_EXTRA_FLAGS += -DJEMALLOC_ENABLE=OFF

# Add more extra cmake build flags
#
# Build flags for nvim, in C
# GKIDE_CMAKE_EXTRA_FLAGS += "-DCMAKE_C_FLAGS=..."
#
# Build flags for snail, in C++
# GKIDE_CMAKE_EXTRA_FLAGS += "-DCMAKE_CXX_FLAGS=..."
#
# Build flags for deps
# DEPS_CMAKE_EXTRA_FLAGS += "..."

# Show details build command, this can be reached by doing one of the followings:
#
# - setting 'CMAKE_VERBOSE_MAKEFILE' to 'ON' in the CMakeList.txt
# - using 'make VERBOSE=1 ...'
# - using one of the followings:
#   cmake -DCMAKE_VERBOSE_MAKEFILE=ON ...
#   GKIDE_CMAKE_EXTRA_FLAGS += -DCMAKE_VERBOSE_MAKEFILE=ON
#   DEPS_CMAKE_EXTRA_FLAGS  += -DCMAKE_VERBOSE_MAKEFILE=ON
#
# Generating the details build log: $ make | tee build.log

# Generates a compile_commands.json file in machine-readable form
#
# GKIDE_CMAKE_EXTRA_FLAGS += -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
# DEPS_CMAKE_EXTRA_FLAGS  += -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
